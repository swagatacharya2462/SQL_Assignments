1: Rank the customers based on the total amount they've spent on rentals.
SELECT customer.customer_id, customer.first_name, customer.last_name, SUM(payment.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(payment.amount) DESC) AS rank
FROM customer
JOIN payment ON customer.customer_id = payment.customer_id
GROUP BY customer.customer_id
ORDER BY rank;

2: Calculate the cumulative revenue generated by each film over time.
SELECT film.title, payment.payment_date, SUM(payment.amount) OVER (PARTITION BY film.film_id ORDER BY payment.payment_date) AS cumulative_revenue
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
JOIN payment ON rental.rental_id = payment.rental_id
ORDER BY film.title, payment.payment_date;

3: Determine the average rental duration for each film, considering films with similar lengths.
SELECT film.length, film.title, AVG(rental.return_date - rental.rental_date) AS average_rental_duration
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.length, film.title
ORDER BY film.length;

4: Identify the top 3 films in each category based on their rental counts.
SELECT category.name AS category, film.title, COUNT(rental.rental_id) AS rental_count,
       RANK() OVER (PARTITION BY category.category_id ORDER BY COUNT(rental.rental_id) DESC) AS rank
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY category.category_id, film.film_id
HAVING rank <= 3;

5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
WITH CustomerRentals AS (
    SELECT customer_id, COUNT(rental_id) AS total_rentals
    FROM rental
    GROUP BY customer_id
), 
AverageRentals AS (
    SELECT AVG(total_rentals) AS avg_rentals
    FROM CustomerRentals
)
SELECT c.customer_id, c.total_rentals, a.avg_rentals,
       (c.total_rentals - a.avg_rentals) AS rental_difference
FROM CustomerRentals c
CROSS JOIN AverageRentals a;

6: Find the monthly revenue trend for the entire rental store over time.
SELECT DATE_FORMAT(payment.payment_date, '%Y-%m') AS month, SUM(payment.amount) AS monthly_revenue
FROM payment
GROUP BY month
ORDER BY month;

7: Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH CustomerSpending AS (
    SELECT customer_id, SUM(amount) AS total_spent
    FROM payment
    GROUP BY customer_id
),
Top20PercentThreshold AS (
    SELECT PERCENTILE_CONT(0.8) WITHIN GROUP (ORDER BY total_spent) AS spending_threshold
    FROM CustomerSpending
)
SELECT customer_id, total_spent
FROM CustomerSpending
WHERE total_spent >= (SELECT spending_threshold FROM Top20PercentThreshold)
ORDER BY total_spent DESC;

8: Calculate the running total of rentals per category, ordered by rental count.
SELECT category.name AS category, COUNT(rental.rental_id) AS rental_count,
       SUM(COUNT(rental.rental_id)) OVER (PARTITION BY category.category_id ORDER BY COUNT(rental.rental_id) DESC) AS running_total
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.category_id, film.film_id
ORDER BY category.name, rental_count DESC;

9: Find the films that have been rented less than the average rental count for their respective categories.
WITH CategoryAverageRentals AS (
    SELECT category.category_id, category.name AS category, AVG(rental_count) AS avg_rental_count
    FROM (
        SELECT category.category_id, film.film_id, COUNT(rental.rental_id) AS rental_count
        FROM film
        JOIN film_category ON film.film_id = film_category.film_id
        JOIN category ON film_category.category_id = category.category_id
        JOIN inventory ON film.film_id = inventory.film_id
        JOIN rental ON inventory.inventory_id = rental.inventory_id
        GROUP BY category.category_id, film.film_id
    ) AS FilmRentalCounts
    GROUP BY category.category_id
)
SELECT film.title, category.name AS category, COUNT(rental.rental_id) AS rental_count
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id, category.category_id
HAVING rental_count < (SELECT avg_rental_count FROM CategoryAverageRentals WHERE category.category_id = film_category.category_id);

10: Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT DATE_FORMAT(payment.payment_date, '%Y-%m') AS month, SUM(payment.amount) AS monthly_revenue
FROM payment
GROUP BY month
ORDER BY monthly_revenue DESC
LIMIT 5;